/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        com_1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
        };

        com_2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8>;
        };

        Comma {
            bindings = <&kp LS(SLASH)>;
            key-positions = <32 33>;
        };

        Dot {
            bindings = <&kp SLASH>;
            key-positions = <33 34>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        Lang: Lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp W        &kp E          &kp R         &kp T        &kp Y      &kp U         &kp I          &kp O        &kp P                &none
&none  &hrm LGUI A  &hrm LALT S  &hrm LSHIFT D  &hrm LCTRL F  &kp G        &kp H      &hrm RCTRL J  &hrm RSHFT K   &hrm RALT L  &hrm RGUI SEMICOLON  &none
&Lang  &kp Z        &kp X        &kp C          &kp V         &kp B        &kp N      &kp M         &kp COMMA      &kp DOT      &kp SQT              &Lang
                                 &lt 4 TAB      &mo 1         &kp SPACE    &kp ENTER  &mo 2         &kp BACKSPACE
            >;
        };

        Nav {
            bindings = <
&none   &kp N1                &kp N2        &kp N3          &kp N4            &kp N5        &kp N6           &kp N7                   &kp N8                 &kp N9             &kp N0                &none
&none   &hrm LEFT_GUI ESCAPE  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp ENTER     &kp PRINTSCREEN  &hrm RIGHT_CONTROL LEFT  &hrm RIGHT_SHIFT DOWN  &hrm RIGHT_ALT UP  &hrm RIGHT_GUI RIGHT  &none
&trans  &none                 &kp HOME      &kp INS         &kp END           &kp DELETE    &kp CAPSLOCK     &none                    &kp PAGE_DOWN          &kp PAGE_UP        &none                 &trans
                                            &trans          &trans            &trans        &trans           &mo 3                    &trans
            >;
        };

        Sym {
            bindings = <
&none   &none           &kp LT          &kp EQUAL          &kp GT           &kp GRAVE    &kp CARET  &kp LBKT         &kp UNDER        &kp RBKT        &none           &none
&none   &hrm LGUI BSLH  &hrm LALT LPAR  &hrm LSHIFT MINUS  &hrm LCTRL RPAR  &kp PLUS     &kp PRCNT  &hrm RCTRL LBRC  &hrm RSHFT SEMI  &hrm RALT RBRC  &hrm RGUI EXCL  &none
&trans  &kp HASH        &kp STAR        &kp COLON          &kp FSLH         &none        &none      &kp PIPE         &kp TILDE        &kp AMPS        &kp DLLR        &trans
                                        &trans             &mo 3            &trans       &trans     &trans           &trans
            >;
        };

        Adj {
            bindings = <
&none   &bootloader  &kp F1        &kp F2         &kp F3         &kp F4     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR      &none
&none   &kp LGUI     &hrm LALT F5  &hrm LSHFT F6  &hrm LCTRL F7  &kp F8     &out OUT_BLE  &hrm RCTRL C_VOL_DN  &hrm RSHFT C_MUTE  &hrm RALT C_VOL_UP  &kp RGUI        &none
&trans  &none        &kp F9        &kp F10        &kp F11        &kp F12    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock  &trans
                                   &trans         &trans         &trans     &trans        &trans               &trans
            >;
        };

        Mouse {
            bindings = <
&none   &none           &none      &mkp MB4   &mkp MB5   &none             &none  &none           &none           &none         &none            &none
&none   &kp KP_NUMLOCK  &mkp MCLK  &mkp RCLK  &mkp LCLK  &kp SCROLLLOCK    &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&trans  &none           &none      &none      &none      &none             &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                                   &trans     &none      &none             &none  &none           &none
            >;
        };
    };
};
